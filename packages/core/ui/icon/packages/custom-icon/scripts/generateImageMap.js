import fs from 'fs';
import path from 'path';

// Преобразует строку в PascalCase (например, "user-icon" → "UserIcon")
function toPascalCase(str) {
  return str
    .split(/[-_]/)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join('');
}

const __dirname = path.dirname(new URL(import.meta.url).pathname);
const iconsDir = path.join(__dirname, '../icons');
const outputFile = path.join(__dirname, '../src/iconCore.tsx');

try {
  // Получаем список SVG-файлов
  const files = fs.readdirSync(iconsDir)
    .filter(file => file.endsWith('.svg'))
    .sort(); // Сортируем для предсказуемого порядка

  // Генерируем импорты
  const imports = files.map(file => {
    const name = path.basename(file, '.svg');
    const componentName = toPascalCase(name);
    return `import ${componentName} from "../icons/${file}?react";`;
  });

  // Генерируем тип IconType
  const iconTypes = files.map(file =>
    `"${path.basename(file, '.svg').toLowerCase()}"`
  ).join('\n    | ');

  // Генерируем записи для IconMap
  const iconMapEntries = files.map(file => {
    const name = path.basename(file, '.svg').toLowerCase();
    const componentName = toPascalCase(path.basename(file, '.svg'));
    return `  ["${name}"]: ({ ...props }) => <${componentName} {...props} />,`;
  }).join('\n');

  // Формируем содержимое файла
  const content = `import { ReactElement } from "react";

${imports.join('\n')}

// Autogenerated by script - do not edit manually

export type IconType =
    | ${iconTypes}

export type IconProps = React.SVGProps<SVGSVGElement>;

export const IconMap: Record<IconType, (props: IconProps) => ReactElement> = {
${iconMapEntries}
};
`;

  // Записываем результат в файл
  fs.writeFileSync(outputFile, content);
  console.log('✅ iconCore.tsx успешно сгенерирован!');
  console.log(`Найдено иконок: ${files.length}`);
} catch (err) {
  console.error('❌ Ошибка при генерации iconCore:', err);
  process.exit(1);
}
